#!/usr/bin/env python
import sys, time, struct, math
import serial
import rospy
from geometry_msgs.msg import Twist


def compute_checksum(msg):
    return sum([ord(c) for c in msg]) & 0x7f

def create_command_string(cmd, args=[]):
    '''
    Take an integer command number and a list of integer (byte sized) args,
    and return a command string that includes the checksum.

    Assumes roboclaw device address is 0x80 (the default)
    '''
    cmd_str = ''.join([chr(0x80), chr(cmd)] + [chr(c) for c in args])
    return cmd_str + chr(compute_checksum(cmd_str))

class RoboClaw:
    def __init__(self, port='/dev/roboclaw', baudrate=38400):
        self._ser = serial.Serial(port, baudrate)

    def get_battery_voltage(self):
        self._ser.write(create_command_string(24))
        response = self._ser.read(3)
        (voltage,) = struct.unpack('>H', response[:2])
        return voltage*.1
        time.sleep(0.01)

    def get_motor_currents(self):
        '''
        Get current of motors in Amps.
        '''
        self._ser.write(create_command_string(49))
        response = self._ser.read(5)
        (m1_cur, m2_cur) = struct.unpack('>HH', response[:4])
        return m1_cur*0.01, m2_cur*0.01
        time.sleep(0.01)

    def drive_forward(self, speed):
        self._ser.write(create_command_string(12, [speed]))
        time.sleep(0.01)

    def drive_m1(self, speed):
        '''
        Speed should be between -1.0 and 1.0
        '''
        command = int(round(64 + 63 * speed))
        self._ser.write(create_command_string(6, [command]))

    def drive_m2(self, speed):
        '''
        Speed should be between -1.0 and 1.0
        '''
        command = int(round(64 + 63 * speed))
        self._ser.write(create_command_string(7, [command]))

    def __del__(self):
        try:
            self._ser.close()
        except:
            pass

class RoboClawNode:
    def __init__(self):
        self._rc = RoboClaw()
        self._robot_radius = rospy.get_param('robot_radius', .15)
        self._wheel_radius = rospy.get_param('wheel_radius', .15)

        # Approximate maximum wheel velocity in rad/s
        self._wheel_vel_max = rospy.get_param('wheel_vel_max', 32.0 / math.pi)
        self._cmd_vel_sub = rospy.Subscriber('cmd_vel', Twist, self.twist_cb)

    def twist_cb(self, msg):
        '''
        We don't have encoders, so we make the (crappy) assumption that velocity is proportional to the PWM
        duty cycle.
        '''
        rospy.loginfo('Got velocity command: %f linear, %f angular', msg.linear.x, msg.angular.z)
        u_r = -(msg.linear.x + 0.5 * self._robot_radius * msg.angular.z) / self._wheel_radius
        u_l = -(msg.linear.x - 0.5 * self._robot_radius * msg.angular.z) / self._wheel_radius

        # Convert the velocities into approximate fractions
        fraction_r = u_r / self._wheel_vel_max
        fraction_l = u_l / self._wheel_vel_max

        # Clamp to range -1.0 to 1.0
        fraction_r = math.copysign(min(1.0, abs(fraction_r)), fraction_r)
        fraction_l = math.copysign(min(1.0, abs(fraction_l)), fraction_l)

        self._rc.drive_m1(fraction_r)
        self._rc.drive_m2(fraction_l)

rospy.init_node('motor_driver')
rcn = RoboClawNode()
rospy.spin()

